import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import chalk from 'chalk';
import sharp from 'sharp';
import glob from 'glob';
import JsonFile from '@expo/json-file';
import logger from './Logger';

/*
 * Converts a raw number of bytes into a human readable value
 */
export const toReadableValue = bytes => {
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const index = Math.floor(Math.log(bytes) / Math.log(1024));
  const reduced = (bytes / Math.pow(1024, index)).toFixed(2) * 1;

  return `${reduced} ${sizes[index]}`;
};

/*
 * Calculate SHA256 Checksum value of a file based on its contents
 */
export const calculateHash = file => {
  const contents = fs.readFileSync(file);
  return crypto
    .createHash('sha256')
    .update(contents)
    .digest('hex');
};

/*
 * Compress an inputted jpg or png and save original copy with .expo extension
 */
export const optimizeImage = async (image, newName) => {
  logger.global.info(`Optimizing ${image}`);
  // Rename the file with .expo extension
  fs.copyFileSync(image, newName);

  // Extract the format and compress
  const buffer = await sharp(image).toBuffer();
  const { format } = await sharp(buffer).metadata();
  if (format === 'jpeg') {
    await sharp(newName)
      .jpeg({ quality: 60 })
      .toFile(image)
      .catch(err => logger.global.error(err));
  } else {
    await sharp(newName)
      .png({ quality: 60 })
      .toFile(image)
      .catch(err => logger.global.error(err));
  }
};

/*
 * Find all project assets under assetBundlePatterns in app.json excluding node_modules
 */
export const getAssetFiles = (exp, projectDir) => {
  const { assetBundlePatterns } = exp;
  const options = { cwd: projectDir, ignore: '**/node_modules/**' };
  const files = [];
  assetBundlePatterns.forEach(pattern => {
    files.push(...glob.sync(pattern, options));
  });
  return files.map(file => `${projectDir}/${file}`.replace('//', '/'));
};

/*
 * Read the contents of assets.json under .expo-shared folder. Create the file/directory if they don't exist.
 */
export const readAssetJsonAsync = async projectDir => {
  const dirPath = path.join(projectDir, '.expo-shared');
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath);
  }

  const assetJson = new JsonFile(path.join(dirPath, 'assets.json'));
  if (!fs.existsSync(assetJson.file)) {
    const message =
      `Creating ${chalk.yellow('.expo-shared/assets.json')} in the project's root directory.\n` +
      `This file is autogenerated and should not be edited directly.\n` +
      `${chalk.italic(
        'You should commit this to git so that asset state is shared between collaborators.'
      )}`;
    logger.global.info(message);

    await assetJson.writeAsync({});
  }
  const assetInfo = await assetJson.readAsync();
  return [assetJson, assetInfo];
};

/*
 * Add .expo extension to a filename in a path string
 */
export const createNewFilename = image => {
  const { dir, name, ext } = path.parse(image);
  return dir + '/' + name + '.expo' + ext;
};
